# Apex Dashboard - iRacing Performance Analytics

## Project Overview
Modern, data-driven iRacing dashboard built with Next.js 15, TypeScript, and Tailwind CSS. Provides comprehensive driver analysis, race results, and performance tracking using the official iRacing API.

## Current Architecture
- **Frontend**: Next.js 15 App Router, TypeScript, Tailwind CSS, shadcn/ui
- **API Integration**: themich4/iracing-api package (v0.5.2)
- **Authentication**: Persistent session management with auto-refresh
- **Caching**: Multi-level caching (race results + lap data)
- **Testing**: Jest with comprehensive test coverage (181 tests)

## Key Features
- Real-time driver performance analysis
- Interactive iRating/Safety Rating history charts
- Progressive race data loading with live updates
- Advanced filtering (year, season, category, track, car)
- Race result analysis with lap-by-lap data
- Driver comparison tools
- Responsive design with dark/light mode

## Technology Stack
- Next.js 15 with App Router
- TypeScript with strict mode
- Tailwind CSS + shadcn/ui components
- Recharts for data visualization
- Zod for runtime validation
- Jest for testing

## Data Sources
- Official iRacing API via themich4/iracing-api wrapper
- Enhanced with progressive loading and intelligent caching
- Real-time lap data integration
- Historical performance tracking

## Current Issues Identified (Pre-refactoring)
1. TypeScript compilation errors in progressive loading
2. Mixed API architecture (core vs modular)
3. Import path inconsistencies for type definitions
4. Hardcoded localhost URLs in production code
5. Safety Rating calculation inaccuracies

## Refactoring Goals
1. Fix all TypeScript compilation errors
2. Unify API wrapper architecture
3. Implement SOLID principles throughout
4. Enhance data accuracy and real-time updates
5. Add advanced analytics features
6. Optimize performance and caching
7. Improve mobile experience

## Development Principles
- KISS (Keep It Simple, Stupid)
- SOLID principles
- Atomic development practices
- Comprehensive testing
- Type safety first
- Performance optimization
- User experience focus

## API Rate Limiting & Performance
- Configurable rate limiting with 600ms delays
- Multi-level caching with TTL management
- Progressive loading for large datasets
- Background session refresh
- Graceful degradation on API failures

## Environment Configuration
Required environment variables:
```
IRACING_EMAIL=your-email@example.com
IRACING_PASSWORD=your-password
IRACING_SESSION_DURATION_HOURS=4
IRACING_REFRESH_THRESHOLD_MINUTES=30
IRACING_MAX_RETRY_ATTEMPTS=3
IRACING_ENABLE_SESSION_PERSISTENCE=true
IRACING_ENABLE_LAP_DATA_FETCHING=true
IRACING_RATE_LIMIT_DELAY_MS=600
IRACING_MAX_LAP_DATA_PARTICIPANTS=50
```

## Testing Strategy
- Unit tests for all API functions
- Integration tests for data flows
- Component tests for UI elements
- Mock data for predictable testing
- Coverage reporting with Jest

## Deployment Notes
- Built for production deployment
- Environment-specific configurations
- CAPTCHA handling for iRacing authentication
- Session persistence across server restarts

## Security Considerations
- Credentials stored in environment variables
- No sensitive data in client-side code
- Session management with automatic refresh
- Rate limiting to respect API terms
- Input validation with Zod schemas

## Performance Optimizations
- Server-side data fetching with caching
- Progressive loading for large datasets
- Optimized image loading
- Lazy loading for off-screen content
- Bundle optimization with Next.js

## Browser Support
- Modern browsers with ES2020+ support
- Responsive design for mobile/tablet
- Progressive enhancement
- Fallbacks for API failures

## Monitoring & Observability
- Console logging for API operations
- Error tracking and reporting
- Cache statistics and performance metrics
- Session status monitoring
- Rate limiting statistics

## Future Enhancement Ideas
- Advanced race analytics (sector times, tire wear)
- Driver comparison tools and benchmarking
- Historical season analysis
- Social features (leagues, achievements)
- Data export capabilities
- Custom dashboard widgets
- Mobile app development
- AI-powered performance insights